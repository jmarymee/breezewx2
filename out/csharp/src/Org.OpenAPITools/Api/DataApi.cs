/*
 * AviationWeather.gov API
 *
 * New data API of AviationWeather.gov. This supercedes the ADDS Data Server and AviationWeather Web Services.
 *
 * The version of the OpenAPI document: 3.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Airport info
        /// </summary>
        /// <remarks>
        /// Information about airports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataAirport(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Airport info
        /// </summary>
        /// <remarks>
        /// Information about airports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAirportWithHttpInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// US Area Forecasts
        /// </summary>
        /// <remarks>
        /// Text Area Forecasts for the United States outside the contiguous states
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Date  * &#x60;gulf&#x60; - Gulf of Mexico  * &#x60;hawaii&#x60; - Hawaii  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataAreaFcst(string region, int operationIndex = 0);

        /// <summary>
        /// US Area Forecasts
        /// </summary>
        /// <remarks>
        /// Text Area Forecasts for the United States outside the contiguous states
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Date  * &#x60;gulf&#x60; - Gulf of Mexico  * &#x60;hawaii&#x60; - Hawaii  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAreaFcstWithHttpInfo(string region, int operationIndex = 0);
        /// <summary>
        /// CWSU Center Advisories
        /// </summary>
        /// <remarks>
        /// Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DataCWA(string? hazard = default(string?), string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// CWSU Center Advisories
        /// </summary>
        /// <remarks>
        /// Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataCWAWithHttpInfo(string? hazard = default(string?), string? date = default(string?), int operationIndex = 0);
        /// <summary>
        /// US Forecast Discussions
        /// </summary>
        /// <remarks>
        /// Aviation Forecast Discussions issued by NWS Weather Forecast Offices
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwa">County Warning Area (WFO) (optional)</param>
        /// <param name="type">Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataFcstDisc(string? cwa = default(string?), string? type = default(string?), int operationIndex = 0);

        /// <summary>
        /// US Forecast Discussions
        /// </summary>
        /// <remarks>
        /// Aviation Forecast Discussions issued by NWS Weather Forecast Offices
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwa">County Warning Area (WFO) (optional)</param>
        /// <param name="type">Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataFcstDiscWithHttpInfo(string? cwa = default(string?), string? type = default(string?), int operationIndex = 0);
        /// <summary>
        /// Feature info
        /// </summary>
        /// <remarks>
        /// Additional geographic features
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataFeature(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Feature info
        /// </summary>
        /// <remarks>
        /// Additional geographic features
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataFeatureWithHttpInfo(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// Naviagtional fix info
        /// </summary>
        /// <remarks>
        /// Naviagtional fix data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataFix(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Naviagtional fix info
        /// </summary>
        /// <remarks>
        /// Naviagtional fix data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataFixWithHttpInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// US Graphical AIRMETs
        /// </summary>
        /// <remarks>
        /// Decoded G-AIRMETs for the contiguous United States
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Product type (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date (yyyymmdd_hhmm) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DataGAIRMET(string? type = default(string?), string? format = default(string?), string? hazard = default(string?), string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// US Graphical AIRMETs
        /// </summary>
        /// <remarks>
        /// Decoded G-AIRMETs for the contiguous United States
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Product type (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date (yyyymmdd_hhmm) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataGAIRMETWithHttpInfo(string? type = default(string?), string? format = default(string?), string? hazard = default(string?), string? date = default(string?), int operationIndex = 0);
        /// <summary>
        /// Meteorological Information Statement
        /// </summary>
        /// <remarks>
        /// Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loc">CWSU (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataMIS(string? loc = default(string?), int operationIndex = 0);

        /// <summary>
        /// Meteorological Information Statement
        /// </summary>
        /// <remarks>
        /// Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loc">CWSU (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataMISWithHttpInfo(string? loc = default(string?), int operationIndex = 0);
        /// <summary>
        /// METARs
        /// </summary>
        /// <remarks>
        /// Decoded aviation weather observations
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="taf">Include TAF (optional)</param>
        /// <param name="hours">Hours back to search (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataMetars(string? ids = default(string?), string? format = default(string?), bool? taf = default(bool?), decimal? hours = default(decimal?), string? bbox = default(string?), string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// METARs
        /// </summary>
        /// <remarks>
        /// Decoded aviation weather observations
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="taf">Include TAF (optional)</param>
        /// <param name="hours">Hours back to search (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataMetarsWithHttpInfo(string? ids = default(string?), string? format = default(string?), bool? taf = default(bool?), decimal? hours = default(decimal?), string? bbox = default(string?), string? date = default(string?), int operationIndex = 0);
        /// <summary>
        /// Navigational aid info
        /// </summary>
        /// <remarks>
        /// Navigational aid data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataNavaid(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Navigational aid info
        /// </summary>
        /// <remarks>
        /// Navigational aid data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataNavaidWithHttpInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// Obstacle info
        /// </summary>
        /// <remarks>
        /// Aviation obstacle information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataObstacle(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Obstacle info
        /// </summary>
        /// <remarks>
        /// Aviation obstacle information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataObstacleWithHttpInfo(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// Pilot Reports
        /// </summary>
        /// <remarks>
        /// Pilot reports issued in PIREP or AIREP format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Station ID (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="age">Hours Back (optional)</param>
        /// <param name="distance">Distance (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="inten">Minimum intensity (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataPIREPPHP(string? id = default(string?), string? format = default(string?), decimal? age = default(decimal?), decimal? distance = default(decimal?), decimal? level = default(decimal?), string? inten = default(string?), string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// Pilot Reports
        /// </summary>
        /// <remarks>
        /// Pilot reports issued in PIREP or AIREP format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Station ID (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="age">Hours Back (optional)</param>
        /// <param name="distance">Distance (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="inten">Minimum intensity (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataPIREPPHPWithHttpInfo(string? id = default(string?), string? format = default(string?), decimal? age = default(decimal?), decimal? distance = default(decimal?), decimal? level = default(decimal?), string? inten = default(string?), string? date = default(string?), int operationIndex = 0);
        /// <summary>
        /// Domestic AIRMETs/SIGMETs
        /// </summary>
        /// <remarks>
        /// Domestic SIGMETs and AIRMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs to be discontinued in January 2025.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="type">Product type (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">The level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataSIGMET(string? format = default(string?), string? type = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// Domestic AIRMETs/SIGMETs
        /// </summary>
        /// <remarks>
        /// Domestic SIGMETs and AIRMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs to be discontinued in January 2025.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="type">Product type (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">The level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataSIGMETWithHttpInfo(string? format = default(string?), string? type = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0);
        /// <summary>
        /// Station info
        /// </summary>
        /// <remarks>
        /// Station observation location information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataStationInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Station info
        /// </summary>
        /// <remarks>
        /// Station observation location information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataStationInfoWithHttpInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// TAFs
        /// </summary>
        /// <remarks>
        /// Decoded Terminal Aerodrome Forecast products
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="metar">Include METAR (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="time">Process time by valid (default) or issuance time (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataTaf(string? ids = default(string?), string? format = default(string?), bool? metar = default(bool?), string? bbox = default(string?), string? time = default(string?), string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// TAFs
        /// </summary>
        /// <remarks>
        /// Decoded Terminal Aerodrome Forecast products
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="metar">Include METAR (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="time">Process time by valid (default) or issuance time (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataTafWithHttpInfo(string? ids = default(string?), string? format = default(string?), bool? metar = default(bool?), string? bbox = default(string?), string? time = default(string?), string? date = default(string?), int operationIndex = 0);
        /// <summary>
        /// Wind/Temp Point Data
        /// </summary>
        /// <remarks>
        /// Wind and temperature information from the legacy FD winds
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific  (optional)</param>
        /// <param name="level">Level (optional)</param>
        /// <param name="fcst">Forecast cycle (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataWindTemp(string? region = default(string?), string? level = default(string?), string? fcst = default(string?), int operationIndex = 0);

        /// <summary>
        /// Wind/Temp Point Data
        /// </summary>
        /// <remarks>
        /// Wind and temperature information from the legacy FD winds
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific  (optional)</param>
        /// <param name="level">Level (optional)</param>
        /// <param name="fcst">Forecast cycle (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataWindTempWithHttpInfo(string? region = default(string?), string? level = default(string?), string? fcst = default(string?), int operationIndex = 0);
        /// <summary>
        /// International SIGMETs
        /// </summary>
        /// <remarks>
        /// Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataiSIGMET(string? format = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// International SIGMETs
        /// </summary>
        /// <remarks>
        /// Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataiSIGMETWithHttpInfo(string? format = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Airport info
        /// </summary>
        /// <remarks>
        /// Information about airports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAirportAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Airport info
        /// </summary>
        /// <remarks>
        /// Information about airports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAirportWithHttpInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// US Area Forecasts
        /// </summary>
        /// <remarks>
        /// Text Area Forecasts for the United States outside the contiguous states
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Date  * &#x60;gulf&#x60; - Gulf of Mexico  * &#x60;hawaii&#x60; - Hawaii  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAreaFcstAsync(string region, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// US Area Forecasts
        /// </summary>
        /// <remarks>
        /// Text Area Forecasts for the United States outside the contiguous states
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Date  * &#x60;gulf&#x60; - Gulf of Mexico  * &#x60;hawaii&#x60; - Hawaii  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAreaFcstWithHttpInfoAsync(string region, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// CWSU Center Advisories
        /// </summary>
        /// <remarks>
        /// Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataCWAAsync(string? hazard = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CWSU Center Advisories
        /// </summary>
        /// <remarks>
        /// Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataCWAWithHttpInfoAsync(string? hazard = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// US Forecast Discussions
        /// </summary>
        /// <remarks>
        /// Aviation Forecast Discussions issued by NWS Weather Forecast Offices
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwa">County Warning Area (WFO) (optional)</param>
        /// <param name="type">Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataFcstDiscAsync(string? cwa = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// US Forecast Discussions
        /// </summary>
        /// <remarks>
        /// Aviation Forecast Discussions issued by NWS Weather Forecast Offices
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwa">County Warning Area (WFO) (optional)</param>
        /// <param name="type">Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataFcstDiscWithHttpInfoAsync(string? cwa = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Feature info
        /// </summary>
        /// <remarks>
        /// Additional geographic features
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataFeatureAsync(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Feature info
        /// </summary>
        /// <remarks>
        /// Additional geographic features
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataFeatureWithHttpInfoAsync(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Naviagtional fix info
        /// </summary>
        /// <remarks>
        /// Naviagtional fix data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataFixAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Naviagtional fix info
        /// </summary>
        /// <remarks>
        /// Naviagtional fix data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataFixWithHttpInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// US Graphical AIRMETs
        /// </summary>
        /// <remarks>
        /// Decoded G-AIRMETs for the contiguous United States
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Product type (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date (yyyymmdd_hhmm) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataGAIRMETAsync(string? type = default(string?), string? format = default(string?), string? hazard = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// US Graphical AIRMETs
        /// </summary>
        /// <remarks>
        /// Decoded G-AIRMETs for the contiguous United States
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Product type (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date (yyyymmdd_hhmm) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataGAIRMETWithHttpInfoAsync(string? type = default(string?), string? format = default(string?), string? hazard = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Meteorological Information Statement
        /// </summary>
        /// <remarks>
        /// Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loc">CWSU (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataMISAsync(string? loc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Meteorological Information Statement
        /// </summary>
        /// <remarks>
        /// Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loc">CWSU (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataMISWithHttpInfoAsync(string? loc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// METARs
        /// </summary>
        /// <remarks>
        /// Decoded aviation weather observations
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="taf">Include TAF (optional)</param>
        /// <param name="hours">Hours back to search (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataMetarsAsync(string? ids = default(string?), string? format = default(string?), bool? taf = default(bool?), decimal? hours = default(decimal?), string? bbox = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// METARs
        /// </summary>
        /// <remarks>
        /// Decoded aviation weather observations
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="taf">Include TAF (optional)</param>
        /// <param name="hours">Hours back to search (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataMetarsWithHttpInfoAsync(string? ids = default(string?), string? format = default(string?), bool? taf = default(bool?), decimal? hours = default(decimal?), string? bbox = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Navigational aid info
        /// </summary>
        /// <remarks>
        /// Navigational aid data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataNavaidAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Navigational aid info
        /// </summary>
        /// <remarks>
        /// Navigational aid data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataNavaidWithHttpInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Obstacle info
        /// </summary>
        /// <remarks>
        /// Aviation obstacle information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataObstacleAsync(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Obstacle info
        /// </summary>
        /// <remarks>
        /// Aviation obstacle information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataObstacleWithHttpInfoAsync(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pilot Reports
        /// </summary>
        /// <remarks>
        /// Pilot reports issued in PIREP or AIREP format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Station ID (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="age">Hours Back (optional)</param>
        /// <param name="distance">Distance (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="inten">Minimum intensity (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataPIREPPHPAsync(string? id = default(string?), string? format = default(string?), decimal? age = default(decimal?), decimal? distance = default(decimal?), decimal? level = default(decimal?), string? inten = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pilot Reports
        /// </summary>
        /// <remarks>
        /// Pilot reports issued in PIREP or AIREP format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Station ID (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="age">Hours Back (optional)</param>
        /// <param name="distance">Distance (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="inten">Minimum intensity (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataPIREPPHPWithHttpInfoAsync(string? id = default(string?), string? format = default(string?), decimal? age = default(decimal?), decimal? distance = default(decimal?), decimal? level = default(decimal?), string? inten = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Domestic AIRMETs/SIGMETs
        /// </summary>
        /// <remarks>
        /// Domestic SIGMETs and AIRMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs to be discontinued in January 2025.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="type">Product type (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">The level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataSIGMETAsync(string? format = default(string?), string? type = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Domestic AIRMETs/SIGMETs
        /// </summary>
        /// <remarks>
        /// Domestic SIGMETs and AIRMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs to be discontinued in January 2025.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="type">Product type (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">The level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataSIGMETWithHttpInfoAsync(string? format = default(string?), string? type = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Station info
        /// </summary>
        /// <remarks>
        /// Station observation location information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataStationInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Station info
        /// </summary>
        /// <remarks>
        /// Station observation location information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataStationInfoWithHttpInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// TAFs
        /// </summary>
        /// <remarks>
        /// Decoded Terminal Aerodrome Forecast products
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="metar">Include METAR (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="time">Process time by valid (default) or issuance time (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataTafAsync(string? ids = default(string?), string? format = default(string?), bool? metar = default(bool?), string? bbox = default(string?), string? time = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// TAFs
        /// </summary>
        /// <remarks>
        /// Decoded Terminal Aerodrome Forecast products
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="metar">Include METAR (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="time">Process time by valid (default) or issuance time (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataTafWithHttpInfoAsync(string? ids = default(string?), string? format = default(string?), bool? metar = default(bool?), string? bbox = default(string?), string? time = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wind/Temp Point Data
        /// </summary>
        /// <remarks>
        /// Wind and temperature information from the legacy FD winds
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific  (optional)</param>
        /// <param name="level">Level (optional)</param>
        /// <param name="fcst">Forecast cycle (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataWindTempAsync(string? region = default(string?), string? level = default(string?), string? fcst = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wind/Temp Point Data
        /// </summary>
        /// <remarks>
        /// Wind and temperature information from the legacy FD winds
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific  (optional)</param>
        /// <param name="level">Level (optional)</param>
        /// <param name="fcst">Forecast cycle (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataWindTempWithHttpInfoAsync(string? region = default(string?), string? level = default(string?), string? fcst = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// International SIGMETs
        /// </summary>
        /// <remarks>
        /// Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataiSIGMETAsync(string? format = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// International SIGMETs
        /// </summary>
        /// <remarks>
        /// Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataiSIGMETWithHttpInfoAsync(string? format = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IDataApiSync, IDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Airport info Information about airports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataAirport(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            DataAirportWithHttpInfo(ids, bbox, format);
        }

        /// <summary>
        /// Airport info Information about airports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataAirportWithHttpInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataAirport";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/airport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataAirport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Airport info Information about airports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAirportAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataAirportWithHttpInfoAsync(ids, bbox, format, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Airport info Information about airports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataAirportWithHttpInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataAirport";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/airport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataAirport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// US Area Forecasts Text Area Forecasts for the United States outside the contiguous states
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Date  * &#x60;gulf&#x60; - Gulf of Mexico  * &#x60;hawaii&#x60; - Hawaii  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataAreaFcst(string region, int operationIndex = 0)
        {
            DataAreaFcstWithHttpInfo(region);
        }

        /// <summary>
        /// US Area Forecasts Text Area Forecasts for the United States outside the contiguous states
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Date  * &#x60;gulf&#x60; - Gulf of Mexico  * &#x60;hawaii&#x60; - Hawaii  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataAreaFcstWithHttpInfo(string region, int operationIndex = 0)
        {
            // verify the required parameter 'region' is set
            if (region == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'region' when calling DataApi->DataAreaFcst");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "region", region));

            localVarRequestOptions.Operation = "DataApi.DataAreaFcst";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/areafcst", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataAreaFcst", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// US Area Forecasts Text Area Forecasts for the United States outside the contiguous states
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Date  * &#x60;gulf&#x60; - Gulf of Mexico  * &#x60;hawaii&#x60; - Hawaii  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAreaFcstAsync(string region, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataAreaFcstWithHttpInfoAsync(region, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// US Area Forecasts Text Area Forecasts for the United States outside the contiguous states
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Date  * &#x60;gulf&#x60; - Gulf of Mexico  * &#x60;hawaii&#x60; - Hawaii  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataAreaFcstWithHttpInfoAsync(string region, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'region' is set
            if (region == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'region' when calling DataApi->DataAreaFcst");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "region", region));

            localVarRequestOptions.Operation = "DataApi.DataAreaFcst";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/areafcst", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataAreaFcst", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CWSU Center Advisories Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DataCWA(string? hazard = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = DataCWAWithHttpInfo(hazard, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CWSU Center Advisories Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> DataCWAWithHttpInfo(string? hazard = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "text/html",
                "application/xml",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (hazard != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hazard", hazard));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataCWA";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/api/data/cwa", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataCWA", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CWSU Center Advisories Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataCWAAsync(string? hazard = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await DataCWAWithHttpInfoAsync(hazard, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CWSU Center Advisories Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> DataCWAWithHttpInfoAsync(string? hazard = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "text/html",
                "application/xml",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (hazard != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hazard", hazard));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataCWA";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/data/cwa", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataCWA", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// US Forecast Discussions Aviation Forecast Discussions issued by NWS Weather Forecast Offices
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwa">County Warning Area (WFO) (optional)</param>
        /// <param name="type">Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataFcstDisc(string? cwa = default(string?), string? type = default(string?), int operationIndex = 0)
        {
            DataFcstDiscWithHttpInfo(cwa, type);
        }

        /// <summary>
        /// US Forecast Discussions Aviation Forecast Discussions issued by NWS Weather Forecast Offices
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwa">County Warning Area (WFO) (optional)</param>
        /// <param name="type">Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataFcstDiscWithHttpInfo(string? cwa = default(string?), string? type = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cwa != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cwa", cwa));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "DataApi.DataFcstDisc";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/fcstdisc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataFcstDisc", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// US Forecast Discussions Aviation Forecast Discussions issued by NWS Weather Forecast Offices
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwa">County Warning Area (WFO) (optional)</param>
        /// <param name="type">Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataFcstDiscAsync(string? cwa = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataFcstDiscWithHttpInfoAsync(cwa, type, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// US Forecast Discussions Aviation Forecast Discussions issued by NWS Weather Forecast Offices
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwa">County Warning Area (WFO) (optional)</param>
        /// <param name="type">Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataFcstDiscWithHttpInfoAsync(string? cwa = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cwa != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cwa", cwa));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "DataApi.DataFcstDisc";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/fcstdisc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataFcstDisc", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Feature info Additional geographic features
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataFeature(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            DataFeatureWithHttpInfo(bbox, format);
        }

        /// <summary>
        /// Feature info Additional geographic features
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataFeatureWithHttpInfo(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataFeature";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/feature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataFeature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Feature info Additional geographic features
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataFeatureAsync(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataFeatureWithHttpInfoAsync(bbox, format, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Feature info Additional geographic features
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataFeatureWithHttpInfoAsync(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataFeature";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/feature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataFeature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Naviagtional fix info Naviagtional fix data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataFix(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            DataFixWithHttpInfo(ids, bbox, format);
        }

        /// <summary>
        /// Naviagtional fix info Naviagtional fix data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataFixWithHttpInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataFix";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/fix", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataFix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Naviagtional fix info Naviagtional fix data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataFixAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataFixWithHttpInfoAsync(ids, bbox, format, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Naviagtional fix info Naviagtional fix data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataFixWithHttpInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataFix";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/fix", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataFix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// US Graphical AIRMETs Decoded G-AIRMETs for the contiguous United States
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Product type (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date (yyyymmdd_hhmm) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DataGAIRMET(string? type = default(string?), string? format = default(string?), string? hazard = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = DataGAIRMETWithHttpInfo(type, format, hazard, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// US Graphical AIRMETs Decoded G-AIRMETs for the contiguous United States
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Product type (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date (yyyymmdd_hhmm) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> DataGAIRMETWithHttpInfo(string? type = default(string?), string? format = default(string?), string? hazard = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "text/html",
                "application/xml",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (hazard != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hazard", hazard));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataGAIRMET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/api/data/gairmet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGAIRMET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// US Graphical AIRMETs Decoded G-AIRMETs for the contiguous United States
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Product type (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date (yyyymmdd_hhmm) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataGAIRMETAsync(string? type = default(string?), string? format = default(string?), string? hazard = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await DataGAIRMETWithHttpInfoAsync(type, format, hazard, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// US Graphical AIRMETs Decoded G-AIRMETs for the contiguous United States
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Product type (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="date">Date (yyyymmdd_hhmm) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> DataGAIRMETWithHttpInfoAsync(string? type = default(string?), string? format = default(string?), string? hazard = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "text/html",
                "application/xml",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (hazard != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hazard", hazard));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataGAIRMET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/data/gairmet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGAIRMET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Meteorological Information Statement Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loc">CWSU (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataMIS(string? loc = default(string?), int operationIndex = 0)
        {
            DataMISWithHttpInfo(loc);
        }

        /// <summary>
        /// Meteorological Information Statement Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loc">CWSU (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataMISWithHttpInfo(string? loc = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (loc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "loc", loc));
            }

            localVarRequestOptions.Operation = "DataApi.DataMIS";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/mis", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataMIS", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Meteorological Information Statement Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loc">CWSU (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataMISAsync(string? loc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataMISWithHttpInfoAsync(loc, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Meteorological Information Statement Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loc">CWSU (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataMISWithHttpInfoAsync(string? loc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (loc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "loc", loc));
            }

            localVarRequestOptions.Operation = "DataApi.DataMIS";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/mis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataMIS", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// METARs Decoded aviation weather observations
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="taf">Include TAF (optional)</param>
        /// <param name="hours">Hours back to search (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataMetars(string? ids = default(string?), string? format = default(string?), bool? taf = default(bool?), decimal? hours = default(decimal?), string? bbox = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            DataMetarsWithHttpInfo(ids, format, taf, hours, bbox, date);
        }

        /// <summary>
        /// METARs Decoded aviation weather observations
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="taf">Include TAF (optional)</param>
        /// <param name="hours">Hours back to search (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataMetarsWithHttpInfo(string? ids = default(string?), string? format = default(string?), bool? taf = default(bool?), decimal? hours = default(decimal?), string? bbox = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (taf != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "taf", taf));
            }
            if (hours != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hours", hours));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataMetars";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/metar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataMetars", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// METARs Decoded aviation weather observations
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="taf">Include TAF (optional)</param>
        /// <param name="hours">Hours back to search (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataMetarsAsync(string? ids = default(string?), string? format = default(string?), bool? taf = default(bool?), decimal? hours = default(decimal?), string? bbox = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataMetarsWithHttpInfoAsync(ids, format, taf, hours, bbox, date, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// METARs Decoded aviation weather observations
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="taf">Include TAF (optional)</param>
        /// <param name="hours">Hours back to search (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataMetarsWithHttpInfoAsync(string? ids = default(string?), string? format = default(string?), bool? taf = default(bool?), decimal? hours = default(decimal?), string? bbox = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (taf != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "taf", taf));
            }
            if (hours != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hours", hours));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataMetars";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/metar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataMetars", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Navigational aid info Navigational aid data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataNavaid(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            DataNavaidWithHttpInfo(ids, bbox, format);
        }

        /// <summary>
        /// Navigational aid info Navigational aid data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataNavaidWithHttpInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataNavaid";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/navaid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataNavaid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Navigational aid info Navigational aid data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataNavaidAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataNavaidWithHttpInfoAsync(ids, bbox, format, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Navigational aid info Navigational aid data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">5 letter Fix ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataNavaidWithHttpInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataNavaid";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/navaid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataNavaid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obstacle info Aviation obstacle information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataObstacle(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            DataObstacleWithHttpInfo(bbox, format);
        }

        /// <summary>
        /// Obstacle info Aviation obstacle information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataObstacleWithHttpInfo(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataObstacle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/obstacle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataObstacle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obstacle info Aviation obstacle information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataObstacleAsync(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataObstacleWithHttpInfoAsync(bbox, format, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Obstacle info Aviation obstacle information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataObstacleWithHttpInfoAsync(string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataObstacle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/obstacle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataObstacle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pilot Reports Pilot reports issued in PIREP or AIREP format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Station ID (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="age">Hours Back (optional)</param>
        /// <param name="distance">Distance (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="inten">Minimum intensity (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataPIREPPHP(string? id = default(string?), string? format = default(string?), decimal? age = default(decimal?), decimal? distance = default(decimal?), decimal? level = default(decimal?), string? inten = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            DataPIREPPHPWithHttpInfo(id, format, age, distance, level, inten, date);
        }

        /// <summary>
        /// Pilot Reports Pilot reports issued in PIREP or AIREP format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Station ID (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="age">Hours Back (optional)</param>
        /// <param name="distance">Distance (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="inten">Minimum intensity (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataPIREPPHPWithHttpInfo(string? id = default(string?), string? format = default(string?), decimal? age = default(decimal?), decimal? distance = default(decimal?), decimal? level = default(decimal?), string? inten = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (age != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "age", age));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (inten != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "inten", inten));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataPIREPPHP";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/pirep", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataPIREPPHP", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pilot Reports Pilot reports issued in PIREP or AIREP format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Station ID (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="age">Hours Back (optional)</param>
        /// <param name="distance">Distance (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="inten">Minimum intensity (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataPIREPPHPAsync(string? id = default(string?), string? format = default(string?), decimal? age = default(decimal?), decimal? distance = default(decimal?), decimal? level = default(decimal?), string? inten = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataPIREPPHPWithHttpInfoAsync(id, format, age, distance, level, inten, date, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pilot Reports Pilot reports issued in PIREP or AIREP format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Station ID (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="age">Hours Back (optional)</param>
        /// <param name="distance">Distance (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="inten">Minimum intensity (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataPIREPPHPWithHttpInfoAsync(string? id = default(string?), string? format = default(string?), decimal? age = default(decimal?), decimal? distance = default(decimal?), decimal? level = default(decimal?), string? inten = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (age != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "age", age));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (inten != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "inten", inten));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataPIREPPHP";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/pirep", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataPIREPPHP", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Domestic AIRMETs/SIGMETs Domestic SIGMETs and AIRMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs to be discontinued in January 2025.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="type">Product type (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">The level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataSIGMET(string? format = default(string?), string? type = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0)
        {
            DataSIGMETWithHttpInfo(format, type, hazard, level, date);
        }

        /// <summary>
        /// Domestic AIRMETs/SIGMETs Domestic SIGMETs and AIRMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs to be discontinued in January 2025.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="type">Product type (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">The level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataSIGMETWithHttpInfo(string? format = default(string?), string? type = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (hazard != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hazard", hazard));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataSIGMET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/airsigmet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataSIGMET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Domestic AIRMETs/SIGMETs Domestic SIGMETs and AIRMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs to be discontinued in January 2025.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="type">Product type (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">The level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataSIGMETAsync(string? format = default(string?), string? type = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataSIGMETWithHttpInfoAsync(format, type, hazard, level, date, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Domestic AIRMETs/SIGMETs Domestic SIGMETs and AIRMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs to be discontinued in January 2025.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="type">Product type (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">The level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataSIGMETWithHttpInfoAsync(string? format = default(string?), string? type = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (hazard != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hazard", hazard));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataSIGMET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/airsigmet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataSIGMET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Station info Station observation location information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataStationInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            DataStationInfoWithHttpInfo(ids, bbox, format);
        }

        /// <summary>
        /// Station info Station observation location information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataStationInfoWithHttpInfo(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataStationInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/stationinfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataStationInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Station info Station observation location information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataStationInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataStationInfoWithHttpInfoAsync(ids, bbox, format, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Station info Station observation location information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataStationInfoWithHttpInfoAsync(string? ids = default(string?), string? bbox = default(string?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "DataApi.DataStationInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/stationinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataStationInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TAFs Decoded Terminal Aerodrome Forecast products
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="metar">Include METAR (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="time">Process time by valid (default) or issuance time (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataTaf(string? ids = default(string?), string? format = default(string?), bool? metar = default(bool?), string? bbox = default(string?), string? time = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            DataTafWithHttpInfo(ids, format, metar, bbox, time, date);
        }

        /// <summary>
        /// TAFs Decoded Terminal Aerodrome Forecast products
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="metar">Include METAR (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="time">Process time by valid (default) or issuance time (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataTafWithHttpInfo(string? ids = default(string?), string? format = default(string?), bool? metar = default(bool?), string? bbox = default(string?), string? time = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (metar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "metar", metar));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (time != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "time", time));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataTaf";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/taf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataTaf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TAFs Decoded Terminal Aerodrome Forecast products
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="metar">Include METAR (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="time">Process time by valid (default) or issuance time (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataTafAsync(string? ids = default(string?), string? format = default(string?), bool? metar = default(bool?), string? bbox = default(string?), string? time = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataTafWithHttpInfoAsync(ids, format, metar, bbox, time, date, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// TAFs Decoded Terminal Aerodrome Forecast products
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Station ID(s) (optional)</param>
        /// <param name="format">Format (optional)</param>
        /// <param name="metar">Include METAR (optional)</param>
        /// <param name="bbox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="time">Process time by valid (default) or issuance time (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataTafWithHttpInfoAsync(string? ids = default(string?), string? format = default(string?), bool? metar = default(bool?), string? bbox = default(string?), string? time = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (metar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "metar", metar));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (time != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "time", time));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataTaf";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/taf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataTaf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wind/Temp Point Data Wind and temperature information from the legacy FD winds
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific  (optional)</param>
        /// <param name="level">Level (optional)</param>
        /// <param name="fcst">Forecast cycle (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataWindTemp(string? region = default(string?), string? level = default(string?), string? fcst = default(string?), int operationIndex = 0)
        {
            DataWindTempWithHttpInfo(region, level, fcst);
        }

        /// <summary>
        /// Wind/Temp Point Data Wind and temperature information from the legacy FD winds
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific  (optional)</param>
        /// <param name="level">Level (optional)</param>
        /// <param name="fcst">Forecast cycle (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataWindTempWithHttpInfo(string? region = default(string?), string? level = default(string?), string? fcst = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (fcst != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fcst", fcst));
            }

            localVarRequestOptions.Operation = "DataApi.DataWindTemp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/windtemp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataWindTemp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wind/Temp Point Data Wind and temperature information from the legacy FD winds
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific  (optional)</param>
        /// <param name="level">Level (optional)</param>
        /// <param name="fcst">Forecast cycle (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataWindTempAsync(string? region = default(string?), string? level = default(string?), string? fcst = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataWindTempWithHttpInfoAsync(region, level, fcst, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Wind/Temp Point Data Wind and temperature information from the legacy FD winds
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific  (optional)</param>
        /// <param name="level">Level (optional)</param>
        /// <param name="fcst">Forecast cycle (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataWindTempWithHttpInfoAsync(string? region = default(string?), string? level = default(string?), string? fcst = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (fcst != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fcst", fcst));
            }

            localVarRequestOptions.Operation = "DataApi.DataWindTemp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/windtemp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataWindTemp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// International SIGMETs Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataiSIGMET(string? format = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0)
        {
            DataiSIGMETWithHttpInfo(format, hazard, level, date);
        }

        /// <summary>
        /// International SIGMETs Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataiSIGMETWithHttpInfo(string? format = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (hazard != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hazard", hazard));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataiSIGMET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/isigmet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataiSIGMET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// International SIGMETs Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataiSIGMETAsync(string? format = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataiSIGMETWithHttpInfoAsync(format, hazard, level, date, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// International SIGMETs Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Format (optional)</param>
        /// <param name="hazard">Hazard (optional)</param>
        /// <param name="level">Level +-3000&#39; to search (optional)</param>
        /// <param name="date">Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataiSIGMETWithHttpInfoAsync(string? format = default(string?), string? hazard = default(string?), decimal? level = default(decimal?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (hazard != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hazard", hazard));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "DataApi.DataiSIGMET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/isigmet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataiSIGMET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
