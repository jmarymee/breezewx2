/*
 * AviationWeather.gov API
 *
 * New data API of AviationWeather.gov. This supercedes the ADDS Data Server and AviationWeather Web Services.
 *
 * The version of the OpenAPI document: 3.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataserverApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Dataserver for AIREPs and PIREPs
        /// </summary>
        /// <remarks>
        /// Return aircraft data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="radialDistance">Circular bounds defined by latitude, longitude and radial distance in statute miles\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataserverAirep(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), string? radialDistance = default(string?), int operationIndex = 0);

        /// <summary>
        /// Dataserver for AIREPs and PIREPs
        /// </summary>
        /// <remarks>
        /// Return aircraft data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="radialDistance">Circular bounds defined by latitude, longitude and radial distance in statute miles\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataserverAirepWithHttpInfo(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), string? radialDistance = default(string?), int operationIndex = 0);
        /// <summary>
        /// Dataserver for G-AIRMETs
        /// </summary>
        /// <remarks>
        /// Return G-AIRMETs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataserverGairmet(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0);

        /// <summary>
        /// Dataserver for G-AIRMETs
        /// </summary>
        /// <remarks>
        /// Return G-AIRMETs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataserverGairmetWithHttpInfo(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0);
        /// <summary>
        /// Dataserver for METARs
        /// </summary>
        /// <remarks>
        /// METAR reports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent METAR (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent METAR per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataserverMetars(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0);

        /// <summary>
        /// Dataserver for METARs
        /// </summary>
        /// <remarks>
        /// METAR reports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent METAR (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent METAR per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataserverMetarsWithHttpInfo(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0);
        /// <summary>
        /// Dataserver for AIRMETs and SIGMETs
        /// </summary>
        /// <remarks>
        /// Return AIRMETs and SIGMETs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataserverSigmet(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0);

        /// <summary>
        /// Dataserver for AIRMETs and SIGMETs
        /// </summary>
        /// <remarks>
        /// Return AIRMETs and SIGMETs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataserverSigmetWithHttpInfo(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0);
        /// <summary>
        /// Dataserver for TAFs
        /// </summary>
        /// <remarks>
        /// Return TAF data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent TAF (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent TAF per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DataserverTafs(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0);

        /// <summary>
        /// Dataserver for TAFs
        /// </summary>
        /// <remarks>
        /// Return TAF data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent TAF (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent TAF per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataserverTafsWithHttpInfo(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataserverApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Dataserver for AIREPs and PIREPs
        /// </summary>
        /// <remarks>
        /// Return aircraft data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="radialDistance">Circular bounds defined by latitude, longitude and radial distance in statute miles\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataserverAirepAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), string? radialDistance = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dataserver for AIREPs and PIREPs
        /// </summary>
        /// <remarks>
        /// Return aircraft data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="radialDistance">Circular bounds defined by latitude, longitude and radial distance in statute miles\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataserverAirepWithHttpInfoAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), string? radialDistance = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dataserver for G-AIRMETs
        /// </summary>
        /// <remarks>
        /// Return G-AIRMETs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataserverGairmetAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dataserver for G-AIRMETs
        /// </summary>
        /// <remarks>
        /// Return G-AIRMETs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataserverGairmetWithHttpInfoAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dataserver for METARs
        /// </summary>
        /// <remarks>
        /// METAR reports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent METAR (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent METAR per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataserverMetarsAsync(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dataserver for METARs
        /// </summary>
        /// <remarks>
        /// METAR reports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent METAR (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent METAR per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataserverMetarsWithHttpInfoAsync(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dataserver for AIRMETs and SIGMETs
        /// </summary>
        /// <remarks>
        /// Return AIRMETs and SIGMETs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataserverSigmetAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dataserver for AIRMETs and SIGMETs
        /// </summary>
        /// <remarks>
        /// Return AIRMETs and SIGMETs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataserverSigmetWithHttpInfoAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dataserver for TAFs
        /// </summary>
        /// <remarks>
        /// Return TAF data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent TAF (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent TAF per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataserverTafsAsync(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dataserver for TAFs
        /// </summary>
        /// <remarks>
        /// Return TAF data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent TAF (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent TAF per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataserverTafsWithHttpInfoAsync(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataserverApi : IDataserverApiSync, IDataserverApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataserverApi : IDataserverApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataserverApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataserverApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataserverApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataserverApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataserverApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataserverApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataserverApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataserverApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Dataserver for AIREPs and PIREPs Return aircraft data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="radialDistance">Circular bounds defined by latitude, longitude and radial distance in statute miles\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataserverAirep(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), string? radialDistance = default(string?), int operationIndex = 0)
        {
            DataserverAirepWithHttpInfo(startTime, endTime, hoursBeforeNow, format, boundingBox, radialDistance);
        }

        /// <summary>
        /// Dataserver for AIREPs and PIREPs Return aircraft data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="radialDistance">Circular bounds defined by latitude, longitude and radial distance in statute miles\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataserverAirepWithHttpInfo(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), string? radialDistance = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }
            if (radialDistance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "radialDistance", radialDistance));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverAirep";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/dataserver?requestType=retrieve&dataSource=aircraftreports", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverAirep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for AIREPs and PIREPs Return aircraft data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="radialDistance">Circular bounds defined by latitude, longitude and radial distance in statute miles\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataserverAirepAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), string? radialDistance = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataserverAirepWithHttpInfoAsync(startTime, endTime, hoursBeforeNow, format, boundingBox, radialDistance, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Dataserver for AIREPs and PIREPs Return aircraft data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="radialDistance">Circular bounds defined by latitude, longitude and radial distance in statute miles\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataserverAirepWithHttpInfoAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), string? radialDistance = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }
            if (radialDistance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "radialDistance", radialDistance));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverAirep";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/dataserver?requestType=retrieve&dataSource=aircraftreports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverAirep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for G-AIRMETs Return G-AIRMETs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataserverGairmet(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0)
        {
            DataserverGairmetWithHttpInfo(startTime, endTime, hoursBeforeNow, format, boundingBox);
        }

        /// <summary>
        /// Dataserver for G-AIRMETs Return G-AIRMETs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataserverGairmetWithHttpInfo(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverGairmet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/dataserver?requestType=retrieve&dataSource=gairmets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverGairmet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for G-AIRMETs Return G-AIRMETs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataserverGairmetAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataserverGairmetWithHttpInfoAsync(startTime, endTime, hoursBeforeNow, format, boundingBox, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Dataserver for G-AIRMETs Return G-AIRMETs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataserverGairmetWithHttpInfoAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverGairmet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/dataserver?requestType=retrieve&dataSource=gairmets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverGairmet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for METARs METAR reports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent METAR (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent METAR per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataserverMetars(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0)
        {
            DataserverMetarsWithHttpInfo(stationString, startTime, endTime, hoursBeforeNow, format, mostRecent, mostRecentForEachStation, boundingBox);
        }

        /// <summary>
        /// Dataserver for METARs METAR reports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent METAR (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent METAR per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataserverMetarsWithHttpInfo(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (stationString != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stationString", stationString));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (mostRecent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mostRecent", mostRecent));
            }
            if (mostRecentForEachStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mostRecentForEachStation", mostRecentForEachStation));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverMetars";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/dataserver?requestType=retrieve&dataSource=metars", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverMetars", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for METARs METAR reports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent METAR (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent METAR per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataserverMetarsAsync(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataserverMetarsWithHttpInfoAsync(stationString, startTime, endTime, hoursBeforeNow, format, mostRecent, mostRecentForEachStation, boundingBox, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Dataserver for METARs METAR reports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent METAR (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent METAR per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataserverMetarsWithHttpInfoAsync(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (stationString != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stationString", stationString));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (mostRecent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mostRecent", mostRecent));
            }
            if (mostRecentForEachStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mostRecentForEachStation", mostRecentForEachStation));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverMetars";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/dataserver?requestType=retrieve&dataSource=metars", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverMetars", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for AIRMETs and SIGMETs Return AIRMETs and SIGMETs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataserverSigmet(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0)
        {
            DataserverSigmetWithHttpInfo(startTime, endTime, hoursBeforeNow, format, boundingBox);
        }

        /// <summary>
        /// Dataserver for AIRMETs and SIGMETs Return AIRMETs and SIGMETs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataserverSigmetWithHttpInfo(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverSigmet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/dataserver?requestType=retrieve&dataSource=airsigmets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverSigmet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for AIRMETs and SIGMETs Return AIRMETs and SIGMETs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataserverSigmetAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataserverSigmetWithHttpInfoAsync(startTime, endTime, hoursBeforeNow, format, boundingBox, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Dataserver for AIRMETs and SIGMETs Return AIRMETs and SIGMETs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataserverSigmetWithHttpInfoAsync(string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverSigmet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/dataserver?requestType=retrieve&dataSource=airsigmets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverSigmet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for TAFs Return TAF data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent TAF (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent TAF per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DataserverTafs(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0)
        {
            DataserverTafsWithHttpInfo(stationString, startTime, endTime, hoursBeforeNow, format, mostRecent, mostRecentForEachStation, boundingBox);
        }

        /// <summary>
        /// Dataserver for TAFs Return TAF data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent TAF (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent TAF per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DataserverTafsWithHttpInfo(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (stationString != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stationString", stationString));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (mostRecent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mostRecent", mostRecent));
            }
            if (mostRecentForEachStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mostRecentForEachStation", mostRecentForEachStation));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverTafs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/data/dataserver?requestType=retrieve&dataSource=tafs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverTafs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dataserver for TAFs Return TAF data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent TAF (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent TAF per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataserverTafsAsync(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DataserverTafsWithHttpInfoAsync(stationString, startTime, endTime, hoursBeforeNow, format, mostRecent, mostRecentForEachStation, boundingBox, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Dataserver for TAFs Return TAF data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationString">Station ID(s) Note: must specify stationString or bounding box (minLat, ...) (optional)</param>
        /// <param name="startTime">Start time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="endTime">End time  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60;  (optional)</param>
        /// <param name="hoursBeforeNow">Number of hours before now to search (optional)</param>
        /// <param name="format">Output format (optional, default to xml)</param>
        /// <param name="mostRecent">Single most recent TAF (optional)</param>
        /// <param name="mostRecentForEachStation">Most recent TAF per station (optional)</param>
        /// <param name="boundingBox">Geographic bounding box (lat0, lon0, lat1, lon1) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DataserverTafsWithHttpInfoAsync(string? stationString = default(string?), string? startTime = default(string?), string? endTime = default(string?), decimal? hoursBeforeNow = default(decimal?), string? format = default(string?), bool? mostRecent = default(bool?), string? mostRecentForEachStation = default(string?), string? boundingBox = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (stationString != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stationString", stationString));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (hoursBeforeNow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hoursBeforeNow", hoursBeforeNow));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (mostRecent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mostRecent", mostRecent));
            }
            if (mostRecentForEachStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mostRecentForEachStation", mostRecentForEachStation));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "DataserverApi.DataserverTafs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/data/dataserver?requestType=retrieve&dataSource=tafs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataserverTafs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
