/*
 * AviationWeather.gov API
 *
 * New data API of AviationWeather.gov. This supercedes the ADDS Data Server and AviationWeather Web Services.
 *
 * The version of the OpenAPI document: 3.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataApiTests : IDisposable
    {
        private DataApi instance;

        public DataApiTests()
        {
            instance = new DataApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DataApi
            //Assert.IsType<DataApi>(instance);
        }

        /// <summary>
        /// Test DataAirport
        /// </summary>
        [Fact]
        public void DataAirportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? ids = null;
            //string? bbox = null;
            //string? format = null;
            //instance.DataAirport(ids, bbox, format);
        }

        /// <summary>
        /// Test DataAreaFcst
        /// </summary>
        [Fact]
        public void DataAreaFcstTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string region = null;
            //instance.DataAreaFcst(region);
        }

        /// <summary>
        /// Test DataCWA
        /// </summary>
        [Fact]
        public void DataCWATest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? hazard = null;
            //string? date = null;
            //var response = instance.DataCWA(hazard, date);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DataFcstDisc
        /// </summary>
        [Fact]
        public void DataFcstDiscTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? cwa = null;
            //string? type = null;
            //instance.DataFcstDisc(cwa, type);
        }

        /// <summary>
        /// Test DataFeature
        /// </summary>
        [Fact]
        public void DataFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bbox = null;
            //string? format = null;
            //instance.DataFeature(bbox, format);
        }

        /// <summary>
        /// Test DataFix
        /// </summary>
        [Fact]
        public void DataFixTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? ids = null;
            //string? bbox = null;
            //string? format = null;
            //instance.DataFix(ids, bbox, format);
        }

        /// <summary>
        /// Test DataGAIRMET
        /// </summary>
        [Fact]
        public void DataGAIRMETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? type = null;
            //string? format = null;
            //string? hazard = null;
            //string? date = null;
            //var response = instance.DataGAIRMET(type, format, hazard, date);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DataMIS
        /// </summary>
        [Fact]
        public void DataMISTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? loc = null;
            //instance.DataMIS(loc);
        }

        /// <summary>
        /// Test DataMetars
        /// </summary>
        [Fact]
        public void DataMetarsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? ids = null;
            //string? format = null;
            //bool? taf = null;
            //decimal? hours = null;
            //string? bbox = null;
            //string? date = null;
            //instance.DataMetars(ids, format, taf, hours, bbox, date);
        }

        /// <summary>
        /// Test DataNavaid
        /// </summary>
        [Fact]
        public void DataNavaidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? ids = null;
            //string? bbox = null;
            //string? format = null;
            //instance.DataNavaid(ids, bbox, format);
        }

        /// <summary>
        /// Test DataObstacle
        /// </summary>
        [Fact]
        public void DataObstacleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bbox = null;
            //string? format = null;
            //instance.DataObstacle(bbox, format);
        }

        /// <summary>
        /// Test DataPIREPPHP
        /// </summary>
        [Fact]
        public void DataPIREPPHPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? id = null;
            //string? format = null;
            //decimal? age = null;
            //decimal? distance = null;
            //decimal? level = null;
            //string? inten = null;
            //string? date = null;
            //instance.DataPIREPPHP(id, format, age, distance, level, inten, date);
        }

        /// <summary>
        /// Test DataSIGMET
        /// </summary>
        [Fact]
        public void DataSIGMETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? format = null;
            //string? type = null;
            //string? hazard = null;
            //decimal? level = null;
            //string? date = null;
            //instance.DataSIGMET(format, type, hazard, level, date);
        }

        /// <summary>
        /// Test DataStationInfo
        /// </summary>
        [Fact]
        public void DataStationInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? ids = null;
            //string? bbox = null;
            //string? format = null;
            //instance.DataStationInfo(ids, bbox, format);
        }

        /// <summary>
        /// Test DataTaf
        /// </summary>
        [Fact]
        public void DataTafTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? ids = null;
            //string? format = null;
            //bool? metar = null;
            //string? bbox = null;
            //string? time = null;
            //string? date = null;
            //instance.DataTaf(ids, format, metar, bbox, time, date);
        }

        /// <summary>
        /// Test DataWindTemp
        /// </summary>
        [Fact]
        public void DataWindTempTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? level = null;
            //string? fcst = null;
            //instance.DataWindTemp(region, level, fcst);
        }

        /// <summary>
        /// Test DataiSIGMET
        /// </summary>
        [Fact]
        public void DataiSIGMETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? format = null;
            //string? hazard = null;
            //decimal? level = null;
            //string? date = null;
            //instance.DataiSIGMET(format, hazard, level, date);
        }
    }
}
