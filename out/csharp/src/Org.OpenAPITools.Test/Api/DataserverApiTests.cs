/*
 * AviationWeather.gov API
 *
 * New data API of AviationWeather.gov. This supercedes the ADDS Data Server and AviationWeather Web Services.
 *
 * The version of the OpenAPI document: 3.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DataserverApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataserverApiTests : IDisposable
    {
        private DataserverApi instance;

        public DataserverApiTests()
        {
            instance = new DataserverApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DataserverApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DataserverApi
            //Assert.IsType<DataserverApi>(instance);
        }

        /// <summary>
        /// Test DataserverAirep
        /// </summary>
        [Fact]
        public void DataserverAirepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? startTime = null;
            //string? endTime = null;
            //decimal? hoursBeforeNow = null;
            //string? format = null;
            //string? boundingBox = null;
            //string? radialDistance = null;
            //instance.DataserverAirep(startTime, endTime, hoursBeforeNow, format, boundingBox, radialDistance);
        }

        /// <summary>
        /// Test DataserverGairmet
        /// </summary>
        [Fact]
        public void DataserverGairmetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? startTime = null;
            //string? endTime = null;
            //decimal? hoursBeforeNow = null;
            //string? format = null;
            //string? boundingBox = null;
            //instance.DataserverGairmet(startTime, endTime, hoursBeforeNow, format, boundingBox);
        }

        /// <summary>
        /// Test DataserverMetars
        /// </summary>
        [Fact]
        public void DataserverMetarsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? stationString = null;
            //string? startTime = null;
            //string? endTime = null;
            //decimal? hoursBeforeNow = null;
            //string? format = null;
            //bool? mostRecent = null;
            //string? mostRecentForEachStation = null;
            //string? boundingBox = null;
            //instance.DataserverMetars(stationString, startTime, endTime, hoursBeforeNow, format, mostRecent, mostRecentForEachStation, boundingBox);
        }

        /// <summary>
        /// Test DataserverSigmet
        /// </summary>
        [Fact]
        public void DataserverSigmetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? startTime = null;
            //string? endTime = null;
            //decimal? hoursBeforeNow = null;
            //string? format = null;
            //string? boundingBox = null;
            //instance.DataserverSigmet(startTime, endTime, hoursBeforeNow, format, boundingBox);
        }

        /// <summary>
        /// Test DataserverTafs
        /// </summary>
        [Fact]
        public void DataserverTafsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? stationString = null;
            //string? startTime = null;
            //string? endTime = null;
            //decimal? hoursBeforeNow = null;
            //string? format = null;
            //bool? mostRecent = null;
            //string? mostRecentForEachStation = null;
            //string? boundingBox = null;
            //instance.DataserverTafs(stationString, startTime, endTime, hoursBeforeNow, format, mostRecent, mostRecentForEachStation, boundingBox);
        }
    }
}
